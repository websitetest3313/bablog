"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _immutable = require("immutable");

var _slate = require("slate");

var _slateReact = require("slate-react");

var _serializers = require("../serializers");

var _Toolbar = _interopRequireDefault(require("../MarkdownControl/Toolbar"));

var _renderers = require("./renderers");

var _validators = require("./validators");

var _plugins = _interopRequireWildcard(require("./plugins"));

var _keys = _interopRequireDefault(require("./keys"));

var _visualEditorStyles = _interopRequireDefault(require("./visualEditorStyles"));

var _styles = require("../styles");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const VisualEditorContainer = (0, _styledBase.default)("div", {
  target: "evezps90",
  label: "VisualEditorContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "79elbk",
  styles: "position:relative;"
} : {
  name: "79elbk",
  styles: "position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

const createEmptyRawDoc = () => {
  const emptyText = _slate.Text.create('');

  const emptyBlock = _slate.Block.create({
    object: 'block',
    type: 'paragraph',
    nodes: [emptyText]
  });

  return {
    nodes: [emptyBlock]
  };
};

const createSlateValue = rawValue => {
  const rawDoc = rawValue && (0, _serializers.markdownToSlate)(rawValue);
  const rawDocHasNodes = !(0, _isEmpty2.default)((0, _get2.default)(rawDoc, 'nodes'));

  const document = _slate.Document.fromJSON(rawDocHasNodes ? rawDoc : createEmptyRawDoc());

  return _slate.Value.create({
    document
  });
};

class Editor extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "handlePaste", (e, data, change) => {
      if (data.type !== 'html' || data.isShift) {
        return;
      }

      const ast = (0, _serializers.htmlToSlate)(data.html);

      const doc = _slate.Document.fromJSON(ast);

      return change.insertFragment(doc);
    });

    _defineProperty(this, "selectionHasMark", type => this.state.value.activeMarks.some(mark => mark.type === type));

    _defineProperty(this, "selectionHasBlock", type => this.state.value.blocks.some(node => node.type === type));

    _defineProperty(this, "handleMarkClick", (event, type) => {
      event.preventDefault();
      const resolvedChange = this.state.value.change().focus().toggleMark(type);
      this.ref.onChange(resolvedChange);
      this.setState({
        value: resolvedChange.value
      });
    });

    _defineProperty(this, "handleBlockClick", (event, type) => {
      event.preventDefault();
      let value = this.state.value;
      const doc = value.document;
      const _EditListConfigured$c = _plugins.EditListConfigured.changes,
            unwrapList = _EditListConfigured$c.unwrapList,
            wrapInList = _EditListConfigured$c.wrapInList;
      let change = value.change(); // Handle everything except list buttons.

      if (!['bulleted-list', 'numbered-list'].includes(type)) {
        const isActive = this.selectionHasBlock(type);
        change = change.setBlocks(isActive ? 'paragraph' : type);
      } // Handle the extra wrapping required for list buttons.
      else {
          const isSameListType = value.blocks.some(block => {
            return !!doc.getClosest(block.key, parent => parent.type === type);
          });

          const isInList = _plugins.EditListConfigured.utils.isSelectionInList(value);

          if (isInList && isSameListType) {
            change = change.call(unwrapList, type);
          } else if (isInList) {
            const currentListType = type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list';
            change = change.call(unwrapList, currentListType).call(wrapInList, type);
          } else {
            change = change.call(wrapInList, type);
          }
        }

      const resolvedChange = change.focus();
      this.ref.onChange(resolvedChange);
      this.setState({
        value: resolvedChange.value
      });
    });

    _defineProperty(this, "hasLinks", () => {
      return this.state.value.inlines.some(inline => inline.type === 'link');
    });

    _defineProperty(this, "handleLink", () => {
      let change = this.state.value.change(); // If the current selection contains links, clicking the "link" button
      // should simply unlink them.

      if (this.hasLinks()) {
        change = change.unwrapInline('link');
      } else {
        const url = window.prompt('Enter the URL of the link'); // If nothing is entered in the URL prompt, do nothing.

        if (!url) return; // If no text is selected, use the entered URL as text.

        if (change.value.isCollapsed) {
          change = change.insertText(url).extend(0 - url.length);
        }

        change = change.wrapInline({
          type: 'link',
          data: {
            url
          }
        }).collapseToEnd();
      }

      this.ref.onChange(change);
      this.setState({
        value: change.value
      });
    });

    _defineProperty(this, "handlePluginAdd", pluginId => {
      const getEditorComponents = this.props.getEditorComponents;
      const value = this.state.value;
      const nodes = [_slate.Text.create('')];
      /**
       * Get default values for plugin fields.
       */

      const pluginFields = getEditorComponents().getIn([pluginId, 'fields'], (0, _immutable.List)());
      const defaultValues = pluginFields.toMap().mapKeys((_, field) => field.get('name')).filter(field => field.has('default')).map(field => field.get('default'));
      /**
       * Create new shortcode block with default values set.
       */

      const block = {
        object: 'block',
        type: 'shortcode',
        data: {
          shortcode: pluginId,
          shortcodeNew: true,
          shortcodeData: defaultValues
        },
        isVoid: true,
        nodes
      };
      let change = value.change();
      const focusBlock = change.value.focusBlock;

      if (focusBlock.text === '' && focusBlock.type === 'paragraph') {
        change = change.setNodeByKey(focusBlock.key, block);
      } else {
        change = change.insertBlock(block);
      }

      change = change.focus();
      this.ref.onChange(change);
      this.setState({
        value: change.value
      });
    });

    _defineProperty(this, "handleToggle", () => {
      this.props.onMode('raw');
    });

    _defineProperty(this, "handleDocumentChange", (0, _debounce2.default)(change => {
      const onChange = this.props.onChange;
      const raw = change.value.document.toJSON();
      const markdown = (0, _serializers.slateToMarkdown)(raw);
      this.setState({
        lastRawValue: markdown
      }, () => onChange(markdown));
    }, 150));

    _defineProperty(this, "handleChange", change => {
      if (!this.state.value.document.equals(change.value.document)) {
        this.handleDocumentChange(change);
      }

      this.setState({
        value: change.value
      });
    });

    _defineProperty(this, "processRef", ref => {
      this.ref = ref;
    });

    this.state = {
      value: createSlateValue(props.value),
      lastRawValue: props.value
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    const forcePropsValue = this.shouldForcePropsValue(this.props.value, this.state.lastRawValue, nextProps.value, nextState.lastRawValue);
    return !this.state.value.equals(nextState.value) || forcePropsValue;
  }

  componentDidUpdate(prevProps, prevState) {
    const forcePropsValue = this.shouldForcePropsValue(prevProps.value, prevState.lastRawValue, this.props.value, this.state.lastRawValue);

    if (forcePropsValue) {
      this.setState({
        value: createSlateValue(this.props.value)
      });
    }
  } // If the old props/state values and new state value are all the same, and
  // the new props value does not match the others, the new props value
  // originated from outside of this widget and should be used.


  shouldForcePropsValue(oldPropsValue, oldStateValue, newPropsValue, newStateValue) {
    return (0, _uniq2.default)([oldPropsValue, oldStateValue, newStateValue]).length === 1 && oldPropsValue !== newPropsValue;
  }

  render() {
    const _this$props = this.props,
          onAddAsset = _this$props.onAddAsset,
          getAsset = _this$props.getAsset,
          className = _this$props.className,
          field = _this$props.field,
          getEditorComponents = _this$props.getEditorComponents;
    return _react.default.createElement(VisualEditorContainer, null, _react.default.createElement(_styles.EditorControlBar, null, _react.default.createElement(_Toolbar.default, {
      onMarkClick: this.handleMarkClick,
      onBlockClick: this.handleBlockClick,
      onLinkClick: this.handleLink,
      selectionHasMark: this.selectionHasMark,
      selectionHasBlock: this.selectionHasBlock,
      selectionHasLink: this.hasLinks,
      onToggleMode: this.handleToggle,
      plugins: getEditorComponents(),
      onSubmit: this.handlePluginAdd,
      onAddAsset: onAddAsset,
      getAsset: getAsset,
      buttons: field.get('buttons')
    })), _react.default.createElement(_core.ClassNames, null, (_ref) => {
      let css = _ref.css,
          cx = _ref.cx;
      return _react.default.createElement(_slateReact.Editor, {
        className: cx(className, css`
                  ${_visualEditorStyles.default}
                `),
        value: this.state.value,
        renderNode: _renderers.renderNode,
        renderMark: _renderers.renderMark,
        validateNode: _validators.validateNode,
        plugins: _plugins.default,
        onChange: this.handleChange,
        onKeyDown: _keys.default,
        onPaste: this.handlePaste,
        ref: this.processRef,
        spellCheck: true
      });
    }));
  }

}

exports.default = Editor;

_defineProperty(Editor, "propTypes", {
  onAddAsset: _propTypes.default.func.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onMode: _propTypes.default.func.isRequired,
  className: _propTypes.default.string.isRequired,
  value: _propTypes.default.string,
  field: _reactImmutableProptypes.default.map.isRequired,
  getEditorComponents: _propTypes.default.func.isRequired
});